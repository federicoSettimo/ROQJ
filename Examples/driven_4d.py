import matplotlib.pyplot as plt
import numpy as np
from mpl_toolkits.axes_grid1.inset_locator import inset_axes

filein = open("driven.txt")
Npoints = int(filein.readline())
tf = float(filein.readline())
dt = float(filein.readline())

# Update all rates ecc
t = np.arange(0,tf,dt)
psi = np.zeros(Npoints)
rho = np.zeros(Npoints)
err_rho = np.zeros(Npoints)
exact = np.zeros(Npoints)
psi_c = np.zeros(Npoints)
rho_c = np.zeros(Npoints)
err_coh = np.zeros(Npoints)
exact_c = np.zeros(Npoints)
error = np.zeros(Npoints)
Npsi = np.zeros(Npoints)
Np = np.zeros(Npoints)
Nm = np.zeros(Npoints)
Ng = np.zeros(Npoints)
Ne = np.zeros(Npoints)
gp = np.zeros(Npoints)
gm = np.zeros(Npoints)
b = np.zeros(Npoints)
psi_e = np.zeros(Npoints)
psi_g = np.zeros(Npoints)
g_p = np.zeros(Npoints)
g_m = np.zeros(Npoints)
e_p = np.zeros(Npoints)
e_m = np.zeros(Npoints)
p_g = np.zeros(Npoints)
p_e = np.zeros(Npoints)
m_g = np.zeros(Npoints)
m_e = np.zeros(Npoints)
lpsi_e = np.zeros(Npoints)
lpsi_g = np.zeros(Npoints)
lg_p = np.zeros(Npoints)
lg_m = np.zeros(Npoints)
le_p = np.zeros(Npoints)
le_m = np.zeros(Npoints)
lp_g = np.zeros(Npoints)
lp_e = np.zeros(Npoints)
lm_g = np.zeros(Npoints)
lm_e = np.zeros(Npoints)

for i in range(Npoints):
  line = filein.readline()
  exact[i] = float(line.split()[0])
  psi[i] = float(line.split()[1])

  line = filein.readline()
  exact_c[i] = float(line.split()[0])
  psi_c[i] = float(line.split()[1])

  line = filein.readline()
  Npsi[i] = float(line.split()[0])
  Ng[i] = float(line.split()[1])
  Ne[i] = float(line.split()[2])
  Np[i] = float(line.split()[3])
  Nm[i] = float(line.split()[4])

  line = filein.readline()
  gp[i] = float(line.split()[0])
  gm[i] = float(line.split()[1])
  b[i] = float(line.split()[2])

  line = filein.readline()
  lpsi_e[i] = float(line.split()[0])
  lpsi_g[i] = float(line.split()[1])
  lg_p[i] = float(line.split()[2])
  lg_m[i] = float(line.split()[3])
  le_p[i] = float(line.split()[4])
  le_m[i] = float(line.split()[5])
  lp_g[i] = float(line.split()[6])
  lp_e[i] = float(line.split()[7])
  lm_g[i] = float(line.split()[8])
  lm_e[i] = float(line.split()[9])

  line = filein.readline()
  psi_e[i] = float(line.split()[0])
  psi_g[i] = float(line.split()[1])
  g_p[i] = float(line.split()[2])
  g_m[i] = float(line.split()[3])
  e_p[i] = float(line.split()[4])
  e_m[i] = float(line.split()[5])
  p_g[i] = float(line.split()[6])
  p_e[i] = float(line.split()[7])
  m_g[i] = float(line.split()[8])
  m_e[i] = float(line.split()[9])

filein = open("driven_obs.txt")
for i in range(Npoints):
  line = filein.readline()
  rho[i] = float(line.split()[0])
  err_rho[i] = float(line.split()[1])
  rho_c[i] = float(line.split()[2])
  err_coh[i] = float(line.split()[3])
  error[i] = float(line.split()[4])

fig, ax = plt.subplots(2,2, figsize=(14,8), sharex = True)

ax[0,0].errorbar(t, rho, err_rho, color = "red", label = r'$\rho$', errorevery = int(Npoints/30))
ax[0,0].plot(t, exact, color = "black", alpha = .7)
ax[0,0].plot(t ,psi, color = "green", label = r'$\psi$', alpha = .5)
ax[0,0].errorbar(t, rho_c, err_coh, fmt = '--', color = "red", errorevery = int(Npoints/30))
ax[0,0].plot(t, exact_c, '--', color = "black", alpha = .7)
ax[0,0].plot(t ,psi_c, '--', color = "green", alpha = .5)
ax[0,0].set_ylabel(r'$tr[\rho\sigma_{z(x)}]$, solid(dashed)')
ax[0,0].legend(loc = "upper left")
ax[0,0].set_title(r'$z,x$ componets (left) and error (right, dotted)')
axx = ax[0,0].twinx()
axx.plot(t, error, ':', color = "blue", alpha = .1)
axx.set_ylabel(r'$TD(\rho,\rho_{ex})$')


ax[0,1].plot(t, Npsi, label = r'$\psi$', marker = 'x', markevery = int(Npoints/30), markersize = 4)
ax[0,1].plot(t, Ng, label = r'$0$', marker = 'o', markevery = int(Npoints/30), markersize = 3)
ax[0,1].plot(t, Ne, label = r'$1$', marker = 's', markevery = int(Npoints/30), markersize = 3)
ax[0,1].plot(t, Np, label = r'$+$', marker = '^', markevery = int(Npoints/30), markersize = 3)
ax[0,1].plot(t, Nm, label = r'$-$', marker = 'D', markevery = int(Npoints/30), markersize = 3)
ax[0,1].legend(loc = "upper right")
ax[0,1].set_title("Populations")
ax[0,1].set_yticklabels([])

ax[1,0].plot(t, lpsi_e, label = r'$\psi \to 1$', marker = 'x', markevery = int(Npoints/30), markersize = 4, alpha = .8)
ax[1,0].plot(t, lpsi_g, label = r'$\psi \to 0$', marker = 'x', markevery = int(Npoints/30), markersize = 4, alpha = .8)
ax[1,0].plot(t, lg_p, label = r'$0 \to +$', marker = 'o', markevery = int(Npoints/30), markersize = 3, alpha = .8)
ax[1,0].plot(t, lg_m, label = r'$0 \to -$', marker = 'o', markevery = int(Npoints/30), markersize = 3, alpha = .8)
ax[1,0].plot(t, le_p, label = r'$1 \to +$', marker = 's', markevery = int(Npoints/30), markersize = 3, alpha = .8)
ax[1,0].plot(t, le_m, label = r'$1 \to -$', marker = 's', markevery = int(Npoints/30), markersize = 3, alpha = .8)
ax[1,0].plot(t, lp_g, label = r'$+ \to 0$', marker = '^', markevery = int(Npoints/30), markersize = 3, alpha = .8)
ax[1,0].plot(t, lp_e, label = r'$+ \to 1$', marker = '^', markevery = int(Npoints/30), markersize = 3, alpha = .8)
ax[1,0].plot(t, lm_g, label = r'$- \to 0$', marker = 'D', markevery = int(Npoints/30), markersize = 3, alpha = .8)
ax[1,0].plot(t, lm_e, label = r'$- \to 1$', marker = 'D', markevery = int(Npoints/30), markersize = 3, alpha = .8)
ax[1,0].plot(t, np.zeros(Npoints)+dt, alpha = .3, color = "black")
ax[1,0].legend(loc = "upper right")
ax[1,0].set_ylabel(r'$\lambda_{i \to j}dt$')
ax[1,0].set_title("Jump rates")
ax[1,0].set_xlabel(r'$t$')

ax[1,1].plot(t, psi_e, label = r'$\psi \to 1$', marker = 'x', markevery = int(Npoints/30), markersize = 4, alpha = .8)
ax[1,1].plot(t, psi_g, label = r'$\psi \to 0$', marker = 'x', markevery = int(Npoints/30), markersize = 4, alpha = .8)
ax[1,1].plot(t, g_p, label = r'$0 \to +$', marker = 'o', markevery = int(Npoints/30), markersize = 3, alpha = .8)
ax[1,1].plot(t, g_m, label = r'$0 \to -$', marker = 'o', markevery = int(Npoints/30), markersize = 3, alpha = .8)
ax[1,1].plot(t, e_p, label = r'$1 \to +$', marker = 's', markevery = int(Npoints/30), markersize = 3, alpha = .8)
ax[1,1].plot(t, e_m, label = r'$1 \to -$', marker = 's', markevery = int(Npoints/30), markersize = 3, alpha = .8)
ax[1,1].plot(t, p_g, label = r'$+ \to 0$', marker = '^', markevery = int(Npoints/30), markersize = 3, alpha = .8)
ax[1,1].plot(t, p_e, label = r'$+ \to 1$', marker = '^', markevery = int(Npoints/30), markersize = 3, alpha = .8)
ax[1,1].plot(t, m_g, label = r'$- \to 0$', marker = 'D', markevery = int(Npoints/30), markersize = 3, alpha = .8)
ax[1,1].plot(t, m_e, label = r'$- \to 1$', marker = 'D', markevery = int(Npoints/30), markersize = 3, alpha = .8)
ax[1,1].plot(t, np.zeros(Npoints)+dt, alpha = .3, color = "black")
ax[1,1].legend(loc = "upper right")
ax[1,1].set_ylabel(r'$P(i \to j)$')
ax[1,1].set_title("Jump probabilities - weighted by the populations")
ax[1,1].set_xlabel(r'$t$')

axx = ax[0,1].inset_axes([.07,.65,.4,.3])

axx.plot(t,gp, label = r'$\gamma_+$')
axx.plot(t,gm, label = r'$\gamma_-$')
axx.plot(t,b, label = r'$\beta$')
#axx.set_xlabel(r'$t$')
axx.set_xticklabels([])
axx.legend(loc = "lower right")
#axx.set_title("Rates")

#plt.savefig("/Users/federico/Desktop/driven_"+str(np.random.default_rng().integers(0,10))+".png")
plt.show()